import { CandleStickData, States, Symbols } from "../common";
import * as _Indicators from "../indicators";
import { baseUtils, Ticks } from "../infrastructure/base";
import { IFilter, Pipeline } from "../pipes";
import { Stream } from "../streams";
import { Order, Wallet } from "../wallet";
// _Indicators.ADX()
const isSarAbove: _Indicators.IIndicator = {
    id: "isSARAbove",
    handler: async (candle: CandleStickData) => {
        const median = (candle.high + candle.low) / 2;
        if (
            candle.indicators &&
            candle.indicators.has(_Indicators.SAR()) &&
            candle.indicators.getNumberValue(_Indicators.SAR()) < median
        ) {
            candle.indicators.setValue(isSarAbove, false)
        } else if (
            candle.indicators &&
            candle.indicators.has(_Indicators.SAR()) &&
            candle.indicators.getValue(_Indicators.SAR()) > median
        ) {
            candle.indicators.setValue(isSarAbove, true)
        }

    },
};

const stopLossAtr: _Indicators.IIndicator = {
    id: "stopLossAtr",
    handler: async (candle: CandleStickData) => {
        if (candle.indicators && candle.indicators.has(_Indicators.ATR())) {
            candle.indicators.setValue(stopLossAtr, 1.25 * candle.indicators.getNumberValue(_Indicators.ATR()))
        }
    },
};

const adxSlope: _Indicators.IIndicator = {
    id: "adxSlope",
    handler: async (candle: CandleStickData, THIS: IFilter) => {
        const candles = THIS.getScaler('4h').push(candle)
        const previousCandle = candles.length > 1 ? candles.items[candles.length - 2] : null
        if (previousCandle &&
            candle.indicators &&
            candle.indicators.has(_Indicators.ADX()) &&
            previousCandle.indicators &&
            previousCandle.indicators.has(_Indicators.ADX())
        ) {
            const res = ((candle.indicators.getNumberValue(_Indicators.ADX()) - previousCandle.indicators.getNumberValue(_Indicators.ADX())) / previousCandle.indicators.getNumberValue(_Indicators.ADX())) * 100
            candle.indicators.setValue(adxSlope, res)
        }
    },
};

const indicatorsEX = { ADX: _Indicators.ADX(), ATR: _Indicators.ATR(), SAR: _Indicators.SAR(), minusDi: _Indicators.MDI(), plusDi: _Indicators.PDI(), isSarAbove: isSarAbove, adxSlope: adxSlope, stopLossAtr: stopLossAtr }
const strategy = (candle: CandleStickData) => {
    const indicator = candle.indicators
    let result = ''
    if (
        candle && !candle.isMissing &&
        indicator &&
        indicator.has(indicatorsEX.plusDi, indicatorsEX.minusDi, indicatorsEX.adxSlope, indicatorsEX.isSarAbove)
    ) {
        if (
            indicator.getBoolValue(indicatorsEX.isSarAbove) == false &&
            indicator.getNumberValue(indicatorsEX.plusDi) > (indicator.getNumberValue(indicatorsEX.minusDi) + 5) &&
            indicator.getValue(indicatorsEX.adxSlope) > 1
        ) {
            // const buyOrder: IStrategySignal = { candle: candle }
            result = "openLong"
            // await this.bus.createMessage(`${jobContext.streamID}/${MessageNames.openLongSignal}`, buyOrder).publish();
        } else if (
            indicator.getBoolValue(indicatorsEX.isSarAbove) == true &&
            indicator.getNumberValue(indicatorsEX.plusDi) < (indicator.getNumberValue(indicatorsEX.minusDi) - 5) &&
            indicator.getNumberValue(indicatorsEX.adxSlope) > 1
        ) {
            // const sellOrder: IStrategySignal = { candle: candle }
            result = 'openShort'
            // await this.bus.createMessage(`${jobContext.streamID}/${MessageNames.openShortSignal}`, sellOrder).publish();
        }
        else if (
            indicator.getBoolValue(indicatorsEX.isSarAbove) == true ||
            indicator.getNumberValue(indicatorsEX.plusDi) < (indicator.getNumberValue(indicatorsEX.minusDi) - 5) ||
            // > -5
            indicator.getNumberValue(indicatorsEX.adxSlope) < -5
        ) {
            // const sellOrder: IStrategySignal = { candle: candle }
            result = 'closeLong'
            // await this.bus.createMessage(`${jobContext.streamID}/${MessageNames.closeLongSignal}`, sellOrder).publish();
        }
        else if (
            indicator.getBoolValue(indicatorsEX.isSarAbove) == false ||
            indicator.getNumberValue(indicatorsEX.plusDi) > (indicator.getNumberValue(indicatorsEX.minusDi) + 5) ||
            // > -5
            indicator.getNumberValue(indicatorsEX.adxSlope) < -5
        ) {
            // const sellOrder: IStrategySignal = { candle: candle }
            result = 'closeShort'
            // await this.bus.createMessage(`${jobContext.streamID}/${MessageNames.closeShortSignal}`, sellOrder).publish();
        }
    }
    return result
}

export type Strategy = {
    name: string;
    candle: CandleStickData
}


export class Bot {
    public state: States
    public wallet: Wallet
    public symbol: Symbols;
    constructor() {
        this.wallet = new Wallet(1000, null)
        this.state = 'open'
        this.symbol = 'BTCUSDT'
    }
    public get indicators() {
        return { ADX: _Indicators.ADX(), ATR: _Indicators.ATR(), SAR: _Indicators.SAR(), minusDi: _Indicators.MDI(), plusDi: _Indicators.PDI(), isSarAbove: isSarAbove, adxSlope: adxSlope, stopLossAtr: stopLossAtr }
    }
    run(startTime: Ticks, endTime: Ticks) {
        (endTime);
        const pipeline = new Pipeline()
        // const time = 1633174260000

        pipeline.from('binance', 'spot', 'BTCUSDT', '1m')
            .add(this.indicators.ADX)
            .add(this.indicators.minusDi)
            .add(this.indicators.ATR)
            .add(this.indicators.SAR)
            .add(this.indicators.plusDi)
            .add(isSarAbove)
            .add(adxSlope)
            .add(stopLossAtr, { stream: true, name: "myIndicatorsEX28" })
            .add(async (candle, THIS) => {
                THIS.services.getService("gdyuf")
                THIS.context.stream = THIS.context.stream || new Stream<Strategy>("strategy-BT-20")
                const stream = THIS.context.stream as Stream<Strategy>
                const res = await strategy(candle)
                await stream.write(baseUtils.toTimeEx(candle.openTime), { name: res, candle: candle })
                if (res && candle.openTime >= baseUtils.toTimeEx(Date.UTC(2020, 0, 1, 0, 0, 0, 0)).ticks) {
                    await this.onData(res, candle)
                }
            })
            .add(async (candle) => {
                if (candle.openTime == endTime) {
                    pipeline.stop()
                }
            })
        pipeline.start(startTime)
    }
    runEX(startTime: Ticks, endTime: Ticks) {
        // let total = 0
        const pipeline = new Pipeline()
        // const time = 1633174260000
        // const time = Date.now()
        pipeline.fromStream("myIndicators")
            .add(async (candle) => {
                // total += 1
                // console.log("started");
                // strategy(candle).then((x) => {
                //     this.onData(x, candle)
                // })
                const res = strategy(candle)
                if (res && candle.openTime >= baseUtils.toTimeEx(Date.UTC(2020, 0, 1, 0, 0, 0, 0)).ticks) {
                    this.onData(res, candle)
                }
                // const totalTime = Date.now() - time
                // if (total % 100 == 0) {
                //     console.log(`total process : ${total} , elapsed : ${totalTime}, avg : ${(total * 1000) / totalTime}`);
                // }
                // console.log("hi");

            })
            .add(async (candle) => {
                if (candle.openTime == endTime) {
                    pipeline.stop()
                }
            })
        pipeline.start(startTime)
    }
    async onData(res: string, targetCandle: CandleStickData) {
        // const res = await this.strategy.exec(jobContext)
        // const targetCandle = jobContext.candles.lastCandle
        switch (res) {
            case "openShort":
                this.openShort(targetCandle)
                break;
            case "openLong":
                this.openLong(targetCandle)
                break;
            case "closeShort":
                this.closeShort(targetCandle)
                break;
            case "closeLong":
                this.closeLong(targetCandle)
                break;
            default:
                break;
        }
    }
    openLong(candle: CandleStickData) {
        if (this.state == 'open') {
            const price = candle.close
            //DIVISION
            const amount = ((0.03 * this.wallet.balance) * candle.indicators.getNumberValue(this.indicators.stopLossAtr) / candle.close)
            this.wallet.leverage = candle.indicators.getNumberValue(this.indicators.stopLossAtr)
            // if (1 == 1 || (amount > 0 && this.wallet.balance > 0)) {
            const orderEX = new Order(this.symbol, 'buy', price, amount, candle.closeTime)
            this.wallet.processOrder(orderEX)
            // const report: IReportContext = { order: orderEX, candle: candle, state: 'openLong' }
            // await this.bus.publish(Messages.openLongReportMessage(jobContext.streamID, report));
            // await this.bus.createMessage("Bot/Report", report).publish()
            this.state = 'openLong'
            // } else {
            //     console.log(`insufficient balance detected.balance : ${this.wallet.balance} , amount : ${amount} , leverage:${this.wallet.leverage}`)

            // }
        }
        else if (this.state == 'openShort') {
            this.closeShort(candle, true)
            this.state = 'open'
        }
    }
    openShort(candle: CandleStickData) {
        if (this.state == 'open') {
            const price = candle.close
            const amount = ((0.03 * this.wallet.balance) * candle.indicators.getNumberValue(this.indicators.stopLossAtr)) / candle.close
            this.wallet.leverage = candle.indicators.getNumberValue(this.indicators.stopLossAtr)
            // if (1 == 1 || (amount > 0 && this.wallet.balance > 0)) {
            const orderEX = new Order(this.symbol, 'sell', price, amount, candle.closeTime)
            this.wallet.processOrder(orderEX)
            // const report: IReportContext = { order: orderEX, candle: candle, state: 'openShort' }
            // await this.bus.publish(Messages.openShortReportMessage(jobContext.streamID, report));
            // await this.bus.createMessage("Bot/Report", report).publish()
            this.state = 'openShort'
            // } else {
            //     console.log(`insufficient balance detected.balance : ${this.wallet.balance} , amount : ${amount} , leverage:${this.wallet.leverage}`)
            // }
        }
        else if (this.state == 'openLong') {
            this.closeLong(candle, true)
            this.state = 'open'
        }
    }
    closeLong(candle: CandleStickData, closingOpenposition = false) {
        if (this.state == 'openLong') {
            const price = candle.close
            const latestTrade = this.wallet.getLatestOpenTrade()
            const amount = latestTrade.quantity
            const orderEX = new Order(this.symbol, 'sell', price, amount, candle.closeTime)
            this.wallet.processOrder(orderEX)
            if (!closingOpenposition) {
                // const report: IReportContext = { order: orderEX, candle: candle, state: "closeLong" }
                // await this.bus.publish(Messages.closeLongReportMessage(jobContext.streamID, report));
                // await this.bus.createMessage("Bot/Report", report).publish()
            } else {
                // const report: IReportContext = { order: orderEX, candle: candle, state: "openShort" }
                // await this.bus.publish(Messages.openShortReportMessage(jobContext.streamID, report));
                // await this.bus.createMessage("Bot/Report", report).publish()
            }
            this.state = 'open'
        }
    }
    closeShort(candle: CandleStickData, closingOpenposition = false) {
        if (this.state == 'openShort') {
            const price = candle.close
            const latestTrade = this.wallet.getLatestOpenTrade()
            const amount = latestTrade.quantity
            const orderEX = new Order(this.symbol, 'buy', price, amount, candle.closeTime)
            this.wallet.processOrder(orderEX)

            if (!closingOpenposition) {
                // const report: IReportContext = { order: orderEX, candle: candle, state: "closeShort" }
                // await this.bus.publish(Messages.closeShortReportMessage(jobContext.streamID, report));
                // await this.bus.createMessage("Bot/Report", report).publish()
            }
            else {
                // const report: IReportContext = { order: orderEX, candle: candle, state: "openLong" }
                // await this.bus.publish(Messages.openLongReportMessage(jobContext.streamID, report));
                // await this.bus.createMessage("Bot/Report", report).publish()
            }
            this.state = 'open'
        }
    }
}